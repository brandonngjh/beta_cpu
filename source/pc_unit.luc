module pc_unit (
    input clk,  // clock
    input rst,  // reset
    input slowclk, // slowclock to advance pc
    input id[16],
    input pcsel[3],
    input reg_data_1[32],
    output pc_4[32],
    output pc_4_sxtc[32],
    output pcsel_out[32], // for debug only, does not exist in pc_unit
    output ia[32]
  ) {

  dff pc[32](#INIT(0),.clk(clk)); // PC Register

  sig pcsel_out_sig[32];
  sig pc_4_sxtc_32_sig[32];
  sig pc_4_sxtc_sig[32];
  sig pc_4_sig[32];

  var xAddr, illop; 
  sig reg_data_sig[32];

  always {
    xAddr = h80000008;
    illop = h80000004;

    // initial setups to silence output compilation errors
    pc_4_sig = 0;
    pc_4_sxtc_sig = 0;
    pcsel_out_sig = 0;
    
    // increment pc by 4
    pc_4_sig = c{pc.q[31], pc.q[30:0] + 4};            
    
    // TASK 4
    // shift-and-add pc by 4
    pc_4_sxtc_32_sig = pc_4_sig + c{14x{id[15]}, id[15:0], b00};
    pc_4_sxtc_sig = 32x{pc.q[31]};
    
    // JT 2_mux 
    case(pc.q[31]){
      b0: reg_data_sig = c{b0, reg_data_1[30:2], b00};
      b1: reg_data_sig = c{reg_data_1[31:2], b00};
      
      default:
      reg_data_sig = c{b0, reg_data_1[30:2], b00};
      }
    
    // TASK 1
    // PCSEL mux
    case(pcsel[2:0]){
      b000: pcsel_out_sig = pc_4_sig;
      b001: pcsel_out_sig = pc_4_sxtc_32_sig;
      b010: pcsel_out_sig = reg_data_sig;
      b011: pcsel_out_sig = illop;
      b100: pcsel_out_sig = xAddr;
      default:
      pcsel_out_sig = pc.q;
      }

    // Task 2
    // RESET mux
    
    // advance the PC only when slowclk is 1 
    if(slowclk){
      case(rst){
      b0: pc.d = c{pcsel_out_sig[31:2], b00};
      b1: pc.d = h80000000;
      default:
      pc.d = c{pcsel_out_sig[31:2], b00};
      }
      // set the content of pcreg to be its next value only when slowclk == 1
    }
    
    // output connections
    ia = pc.q;
    pc_4 =  pc_4_sig;
    pc_4_sxtc = pc_4_sxtc_sig;
    pcsel_out = pcsel_out_sig;
    
    
  }
}